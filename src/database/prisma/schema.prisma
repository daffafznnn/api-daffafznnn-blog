// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // atau provider lain yang Anda gunakan
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid()) @db.Uuid
  username        String   @unique @db.VarChar(255)
  email           String   @unique @db.VarChar(255)
  password_hash   String?  @db.VarChar(255)
  google_id       String?  @unique @db.VarChar(255)
  role            String   @default("user") @db.VarChar(50)
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @updatedAt @db.Timestamp(6)

  profile         Profile?
  posts           Post[]
  comments        Comment[]
  postLikes       PostLike[]
  commentLikes    CommentLike[]
  passwordResets  PasswordReset[]
  refreshTokens   RefreshToken[]
}

model Profile {
  id          String   @id @default(uuid()) @db.Uuid
  user_id     String   @unique @db.Uuid
  first_name  String?  @db.VarChar(255)
  last_name   String?  @db.VarChar(255)
  bio         String?  @db.Text
  avatar_url  String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(6)

  user        User     @relation(fields: [user_id], references: [id])
}

model Post {
  id                String   @id @default(uuid()) @db.Uuid
  user_id           String   @db.Uuid
  title             String   @db.VarChar(255)
  content           String   @db.Text
  slug              String   @unique @db.VarChar(255)
  status            String   @default("draft") @db.VarChar(50)
  is_private        Boolean  @default(false)
  published_at      DateTime? @db.Timestamp(6)
  archived_at       DateTime? @db.Timestamp(6)
  view_count        Int?     @db.Integer
  comment_count     Int?     @db.Integer
  likes_count       Int?     @db.Integer
  categories        Json?    @db.Json
  tags              Json?    @db.Json
  featured          Boolean  @default(false)
  meta_description  String?  @db.Text
  image_url         String?  @db.VarChar(255)
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @updatedAt @db.Timestamp(6)

  user              User     @relation(fields: [user_id], references: [id])
  postCategories    PostCategory[]
  postTags          PostTag[]
  comments          Comment[]
  postLikes         PostLike[]
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(6)

  postCategories PostCategory[]
}

model PostCategory {
  id          String   @id @default(uuid()) @db.Uuid
  post_id     String   @db.Uuid
  category_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)

  post        Post     @relation(fields: [post_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])

  @@unique([post_id, category_id])
}

model Tag {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(6)

  postTags   PostTag[]
}

model PostTag {
  id        String   @id @default(uuid()) @db.Uuid
  post_id   String   @db.Uuid
  tag_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)

  post      Post     @relation(fields: [post_id], references: [id])
  tag       Tag      @relation(fields: [tag_id], references: [id])

  @@unique([post_id, tag_id])
}

model Comment {
  id          String   @id @default(uuid()) @db.Uuid
  post_id     String   @db.Uuid
  user_id     String   @db.Uuid
  content     String   @db.Text
  is_approved Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(6)

  post        Post     @relation(fields: [post_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])
  commentLikes CommentLike[]
}

model PostLike {
  id        String   @id @default(uuid()) @db.Uuid
  post_id   String   @db.Uuid
  user_id   String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)

  post      Post     @relation(fields: [post_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])

  @@unique([post_id, user_id])
}

model CommentLike {
  id         String   @id @default(uuid()) @db.Uuid
  comment_id String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)

  comment   Comment  @relation(fields: [comment_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])

  @@unique([comment_id, user_id])
}

model PasswordReset {
  id          String   @id @default(uuid()) @db.Uuid
  user_id     String   @db.Uuid
  reset_token String   @unique @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  expires_at  DateTime @db.Timestamp(6)

  user        User     @relation(fields: [user_id], references: [id])
}

model RefreshToken {
  id          String   @id @default(uuid()) @db.Uuid
  token       String   @unique @db.VarChar(255)
  client_id   String   @db.Uuid
  user_id     String   @db.Uuid
  expires_at  DateTime @db.Timestamp(6)
  created_at  DateTime @default(now()) @db.Timestamp(6)

  user        User     @relation(fields: [user_id], references: [id])
}